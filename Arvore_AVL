#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <conio.h>
#include <time.h>

//STRUCT // 
typedef struct no{
    int chave ; 
    struct no *esquerda ; 
    struct no *direita
}NO ;

//FUNCOES // 
int fator_balanceamento(NO *raiz)  ;
int altura(NO *raiz) ; 
int rotacao_direita (NO **raiz)  ;
int rotacao_esquerda (NO **raiz) ; 
int balanceamento_esquerda (NO **raiz) ; 
int balanceamento_direita (NO **raiz) ; 
int adiciona (NO **raiz, NO *aux) ; 
int imprime (NO *raiz) ; 
int teste_avl (NO *raiz) ; 
int libera (NO *raiz) ;

//FUNCAO MAIN //
int main(){
    int qtd_elementos , i ,aux_1 ; 
    NO *aux ; 
    NO **raiz ; 
    (*raiz) = NULL ;

    printf("\nQuantos elementos desejas adicionar : ") ; 
        scanf("%d",&qtd_elementos) ;

    srand (time(0)); 
    for(i = 0 ; i < qtd_elementos ; i ++ ){
        
        //cria no auxilar // 
        aux = (NO*)malloc(sizeof(NO));
        aux->chave = rand() / 100 ;  
        aux->direita = NULL ;
        aux->esquerda = NULL ;
        
        adiciona(raiz , aux);
        
    }
    
    //teste se eh AVL // 
    if(teste_avl(*raiz)== 1){
        printf("\nEH AVL\n") ;
    }
    
    //imprime// 
    imprime(*raiz) ;
    libera(raiz) ; 
    free(raiz) ;  

}

//ALTURA DA FOLHA //
int altura (NO *raiz) {
    int ele_esquerda , ele_direita ; 

    if(raiz == NULL){
        return 0 ;
    }
    ele_esquerda = altura (raiz->esquerda) ; 
    ele_direita = altura (raiz->direita) ; 

    if(ele_esquerda > ele_direita) {
        return ele_esquerda + 1 ; 
    }else{
        return ele_direita + 1 ;
    }
}

//FATOR DE BALANCEAMENTO // 
int fator_balanceamento (NO *raiz) {
    
    if(raiz == NULL) {
        return 0 ; 
    }else{
        return (altura(raiz->esquerda) - altura(raiz->direita)) ; 
    }
}

//ROTAÇÃO DIREITA // 
int rotacao_direita (NO **raiz) {
    NO *aux; 

    aux = (*raiz)->esquerda; 
    (*raiz)->esquerda = aux->direita ;
    aux->direita = (*raiz) ; 
    (*raiz) = aux  ;  
}

//ROTAÇÃO ESQUERDA // 
int rotacao_esquerda (NO **raiz) {
    NO *aux; 

    aux = (*raiz)->direita ; 
    (*raiz)->direita = aux->esquerda ;
    aux->esquerda = (*raiz) ; 
    (*raiz) = aux  ;  
}

//BALANCEAMENTO ESQUERDA // 
int balanceamento_esquerda (NO **raiz) {
    int fat_bel ; 

    fat_bel = fator_balanceamento((*raiz)->esquerda) ;

    if(fat_bel > 0){
        rotacao_direita(raiz) ;
        return 1 ;
    } else {
        if(fat_bel < 0) {
            rotacao_esquerda(&(*raiz)->esquerda) ; 
            rotacao_direita (raiz) ; 
            return 1 ; 
        }
    }
        return 0 ; 
}


//BALANCEAMENTO DIREITA// 
int balanceamento_direita (NO **raiz) {
    int fat_bel ; 

    fat_bel = fator_balanceamento((*raiz)->direita) ;

    if(fat_bel < 0){
        rotacao_esquerda(raiz) ;
        return 1 ;
    } else {
        if(fat_bel > 0) {
            rotacao_direita(&(*raiz)->esquerda) ; 
            rotacao_esquerda (raiz) ; 
            return 1 ; 
        }
    }
        return 0 ; 
}

//BALANCEAMENTO // 
int balanceamento(NO **raiz) {

    int fat_bel ; 
    fat_bel = fator_balanceamento(*raiz) ; 
    
    if(fat_bel > 1 ){
        return balanceamento_esquerda(raiz) ; 
    }else{
        if(fat_bel < -1) {
            return balanceamento_direita(raiz) ; 
        }else{
            return 0 ; 
        }
    }
}

//ADICIONA // 
int adiciona (NO **raiz, NO *aux) {
    if(*raiz == NULL){
        (*raiz) = aux ; 
        return 1  ; 
    }
    else{
        if((*raiz)->chave > aux->chave){
            if(adiciona(&(*raiz)->esquerda, aux) == 1){
                if(balanceamento(raiz) == 1){
                    return 0 ;
                }else{
                    return 1 ;
                }
            }
        }else{
            if((*raiz)->chave < aux->chave){
                if(adiciona(&(*raiz)->direita ,aux) == 1){
                    if(balanceamento(raiz) == 1 ){
                        return 0;
                    }else{
                        return 1 ; 
                    }
                }else{
                    return 0 ;
                }

            }
        }
    
    }
}


//FUNCAO IMRPIME // 
int imprime (NO *raiz) {

    if(raiz != NULL) {
        printf("%d",raiz->chave) ; 
        printf("(");
        imprime(raiz->esquerda) ; 
        imprime(raiz->direita) ; 
        printf(")") ;
        }
}

//TESTA SE EH AVL // 
int teste_avl (NO *raiz) {
    int fat_bel ; 

    if(raiz == NULL) {
        return 1 ; 
    }

    if(teste_avl(raiz->esquerda) == NULL){
        return 0 ; 
    }else{if(teste_avl(raiz->direita) == NULL){
        return 0 ; 
        }
    }

    fat_bel = fator_balanceamento(raiz) ;

    if((fat_bel > 1)||(fat_bel < -1)){
        return 0 ;
    }else{
        return 1;
    }

}

//LIBERA // 
int libera (NO *raiz) {
    if(raiz == NULL) {
        return 0 ; 
    }
    libera(raiz->esquerda) ; 
    libera(raiz->direita) ; 
    free(raiz) ; 

}   
