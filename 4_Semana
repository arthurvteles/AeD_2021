#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <conio.h>
#include <time.h>


void menu (); 
void InsertionSort(int tamanho ,int *vector) ; 
void SelectionSort (int tamanho , int *vector) ; 
void QuickSort (int inicio , int final ,  int *vector) ; 
int divide (int inicio , int final , int *vector) ; 
void MergeSort (int *vector , int inicio , int final) ;
void merge (int *vector , int inicio , int final , int meio) ; 
int teste(int *vector , int tamanho) ;


int main() {

    int escolha = 0 ,tamanho , *vector,*aux_vec , aux, teste_aux ;
    time_t begin , end ;
    double elapsed ; 
   
   

    printf("\nEscolha o tamanho do vetor : ") ; 
        scanf("%d",&tamanho) ; 
    
    vector = (int*)malloc(sizeof(int)*tamanho) ;
    aux_vec = (int*)malloc(sizeof(int)*tamanho);  

    
    srand(time(0)) ; 
    for (int i = 0 ; i < tamanho ; i++ ) {
        vector[i] = rand()  ; 
        aux_vec[i] = vector[i] ;
    }

   



    while(escolha != 5) {
        
        menu() ; 
        scanf("%d",&escolha) ; 

        switch(escolha) {
            
            case 1 : 
                begin = clock() ; 
                
                InsertionSort(tamanho , vector) ; 
                
                end = clock() ;  
                elapsed = (double)(end - begin)/CLOCKS_PER_SEC;
                printf("Tempo de execucao do Insertion Sort : %.3f seconds.\n", elapsed);     

               teste_aux = teste(vector , tamanho) ; 

               if(teste_aux == 0) {
                   printf("NAO ESTA ORDENADO") ;
               }else {
                   printf("O VETOR ESTA ORDENADO") ; 
               }

            break ; 
        
            case 2 : 
                begin = clock() ;
                
                SelectionSort (tamanho , vector ) ; 
                
                end = clock() ;  
                elapsed = (double)(end - begin)/CLOCKS_PER_SEC;
                printf("Tempo de execucao do Selection Sort: %.3f seconds.\n", elapsed);  

                teste_aux = teste(vector , tamanho) ; 

               if(teste_aux == 0) {
                   printf("NAO ESTA ORDENADO") ;
               }else {
                   printf("O VETOR ESTA ORDENADO") ; 
               }

            break ; 

            case 3 : 
                begin = clock(); 

                QuickSort (0 ,(tamanho - 1) , vector);

                end = clock() ;  
                elapsed = (double)(end - begin)/CLOCKS_PER_SEC;
                printf("Tempo de execucao do Quick Sort: %.3f seconds.\n", elapsed);

                teste_aux = teste(vector , tamanho) ; 

               if(teste_aux == 0) {
                   printf("NAO ESTA ORDENADO") ;
               }else {
                   printf("O VETOR ESTA ORDENADO") ; 
               }
            break ;

            case 4 : 
                begin = clock(); 
                
                MergeSort (vector , 0 , (tamanho - 1)) ; 
                
                end = clock() ;  
                elapsed = (double)(end - begin)/CLOCKS_PER_SEC;
                printf("Tempo de execucao do Merge Sort : %.3f seconds.\n", elapsed);
                
                teste_aux = teste(vector , tamanho) ; 

               if(teste_aux == 0) {
                   printf("NAO ESTA ORDENADO") ;
               }else {
                   printf("O VETOR ESTA ORDENADO") ; 
               }
            break ;

        }         
        
        for(int i=0 ; i < tamanho ; i++ ){ 
            vector[i] = aux_vec[i] ;
        }

        printf("\n***VETOR REINICIADO***") ;

    }

    free(vector) ;
    free(aux_vec) ;  
    return 0 ; 
}

void menu(){
    printf("\n***MENU***") ; 
    printf("\n1-Insertion sort") ;    //Compara todos // 
    printf("\n2-Selection sort") ;    //pega o menor e o coloca na posicao // 
    printf("\n3-Quick sort") ;        // "dividir para conquistar" // 
    printf("\n4-Merge sort") ;        // "dividir para conquistar" //
    printf("\n5-Sair :");
}

void InsertionSort(int tamanho ,int *vector){
    int i , j , aux ; 

    for(i = 1 ; i< tamanho ; i++) {
        j = i ;
        
        while ( (j > 0) && (vector[j] < vector[j-1]) ) {
            aux = vector [j] ; 
            vector[j] = vector [j-1] ; 
            vector [j-1] = aux ; 
            j = j - 1 ;  
        }
    }

}

void SelectionSort (int tamanho , int *vector) {
    int menor_indice , i , j , aux; 

    for(i = 0 ; i <tamanho ; i ++) {
        menor_indice = i ; 

        for (j = i +1 ; j < tamanho ; j ++ ){
            if(vector[menor_indice]> vector[j]) {
                menor_indice = j ; 
            }
        }

        aux = vector[i] ; 
        vector[i] = vector[menor_indice] ; 
        vector[menor_indice] = aux ; 
        
    }
}

void QuickSort(int inicio , int final ,int *vector) {

    int pivo ; //posicao do pivo //

    if(inicio < final) {
        pivo = divide (inicio, final , vector) ; //vai retornar a posicao do pivo // 
        QuickSort(inicio ,pivo-1,vector) ;  //elementos do inicio ate um anes do pivo (1 metadae) // 
        QuickSort(pivo+1, final , vector) ;  //elementos depois do pivo ate o final (2 metade) // 
    }

}

int divide (int inicio , int final , int *vector) {

    int esquerda , direita , pivo , aux ; 

    esquerda = inicio ;  // recebe a posicao do inicio do sub-vetor// 
    direita = final ; //recebe a posicao final do sub-vetor //
    pivo = vector[inicio] ;  //o vetor vai ser o primeiro elemento do sub-vetor //

    while(direita > esquerda) {
        while( vector[esquerda] <= pivo){
            esquerda ++ ; 
        }
        while( vector[direita] > pivo) {
            direita --   ; 
        }
        if(esquerda < direita){
            aux = vector[esquerda] ;
            vector[esquerda]  = vector[direita] ; 
            vector[direita] = aux ; 
        }
    }
    vector[inicio] = vector[direita] ; 
    vector [direita]  = pivo ;
    return direita ; 
}


void MergeSort (int *vector , int inicio , int final ) {
    int meio ; 
    if(inicio < final ){   //teste para ver se chegou ao final (isto e , se o elemento for v[0] , inicio = final ) //
        meio = ceil((inicio + final ) / 2 );

        MergeSort (vector , inicio , meio) ; 
        MergeSort (vector , meio + 1 ,final ); 
    
        merge(vector , inicio , final , meio) ;
    }
}


void merge (int *vector , int inicio , int final , int meio) {

    int i , j , k ;
    int *temp ;  
    int esquerda , direita ,tam , fim_direita = 0 , fim_esquerda = 0 ; 

    direita = inicio  ; 
    esquerda = meio + 1 ; 
    tam = final - inicio + 1 ;

    temp = (int*) malloc(sizeof(int)* tam);

    if(temp == NULL) {
        printf("\nNAO FOI POSSIVEL ALOCAR MEMORIA ") ;
        exit(0);
    }

    for(i = 0 ; i < tam ; i++) {
        if( (fim_direita == 0 ) && (fim_esquerda== 0) ) {    
            if(vector[direita] > vector[esquerda]){ 
                temp[i] = vector[esquerda] ; 
                esquerda ++ ;

            }else {
                temp[i] = vector[direita] ; 
                direita ++ ; 
            }
            if(direita > meio){ 
                fim_direita = 1 ; 
            }if (esquerda > final) {
                fim_esquerda = 1 ; 
            }
        }else {
            if(fim_direita ==  1) {
                temp[i] = vector[esquerda] ; 
                esquerda ++ ; 
            }if(fim_esquerda == 1) {
                temp[i] = vector[direita] ; 
                direita ++ ; 
            }
        }
    }
    for (j = 0 , k = inicio ; j<tam ; j++ , k++) {
        vector[k] = temp[j];
    } 
    free(temp) ; 
}


int teste (int *vector , int tamanho) {
    int i = 0 ; 

    for (i=0 ; i < tamanho - 1 ; i++) {
        if(vector[i]>vector[i+1]) {
            return 0 ; 
        }

    }
    return 1 ; 
}
